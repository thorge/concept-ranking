{"version":3,"sources":["controller.js"],"names":["async","crawl","spawn","require","exports","retrieve","req","res","query","params","name","status","send","result","json","body","results","ner","pythonProcess","text","Object","prototype","toString","call","stdout","on","data","JSON","parse","i","len","queries","length","push","mapSeries","callback","wiki","err"],"mappings":"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","sourcesContent":["(function() {\n  'use strict';\n  var async, crawl, spawn;\n\n  crawl = require('../../crawl/build/crawl.min.js');\n\n  spawn = require(\"child_process\").spawn;\n\n  async = require(\"async\");\n\n  exports.retrieve = function(req, res) {\n    var query;\n    if (!req.params.name) {\n      res.status(500).send([]);\n      return;\n    }\n    query = {\n      \"name\": `${req.params.name}`,\n      \"description\": {\n        \"label\": \"description\",\n        \"stopword\": true\n      },\n      \"properties\": [\n        {\n          \"name\": \"P19\",\n          \"label\": \"placeofbirth\"\n        },\n        {\n          \"name\": \"P21\",\n          \"label\": \"sex\"\n        },\n        {\n          \"name\": \"P20\",\n          \"label\": \"placeofdeath\"\n        },\n        {\n          \"name\": \"P106\",\n          \"label\": \"occupation\",\n          \"stopword\": true\n        },\n        {\n          \"name\": \"P108\",\n          \"label\": \"employer\",\n          \"stopword\": true,\n          \"unique\": true\n        },\n        {\n          \"name\": \"P463\",\n          \"label\": \"memberof\",\n          \"stopword\": true,\n          \"unique\": true\n        }\n      ],\n      \"limit\": 1000,\n      \"lang\": \"en\",\n      \"flatten\": true,\n      \"unique\": true\n    };\n    crawl.retrieve(query, function(result) {\n      res.json(result.body.results);\n    });\n  };\n\n  exports.ner = function(req, res) {\n    var pythonProcess, text;\n    text = req.query['text'];\n    if (!(text && Object.prototype.toString.call(text) === \"[object String]\")) {\n      res.status(500).send([]);\n      return;\n    }\n    // python ner\n    pythonProcess = spawn('python3', [\"/home/uno/repos/TextMining/ner/detect-persons.py\", text]);\n    pythonProcess.stdout.on('data', function(data) {\n      data = JSON.parse(data);\n      res.send(data);\n    });\n  };\n\n  exports.parse = function(req, res) {\n    var pythonProcess, text;\n    text = req.query['text'];\n    if (!(text && Object.prototype.toString.call(text) === \"[object String]\")) {\n      res.status(500).send([]);\n      return;\n    }\n    pythonProcess = spawn('python3', [\"/home/uno/repos/TextMining/ner/detect-persons.py\", text]);\n    return pythonProcess.stdout.on('data', function(data) {\n      var i, len, name, queries;\n      data = JSON.parse(data);\n      queries = [];\n      for (i = 0, len = data.length; i < len; i++) {\n        name = data[i];\n        queries.push({\n          \"name\": `${name}`,\n          \"description\": {\n            \"label\": \"description\",\n            \"stopword\": true\n          },\n          \"properties\": [\n            {\n              \"name\": \"P19\",\n              \"label\": \"placeofbirth\"\n            },\n            {\n              \"name\": \"P21\",\n              \"label\": \"sex\"\n            },\n            {\n              \"name\": \"P20\",\n              \"label\": \"placeofdeath\"\n            },\n            {\n              \"name\": \"P106\",\n              \"label\": \"occupation\",\n              \"stopword\": true\n            },\n            {\n              \"name\": \"P108\",\n              \"label\": \"employer\",\n              \"stopword\": true,\n              \"unique\": true\n            },\n            {\n              \"name\": \"P463\",\n              \"label\": \"memberof\",\n              \"stopword\": true,\n              \"unique\": true\n            }\n          ],\n          \"limit\": 1000,\n          \"lang\": \"en\",\n          \"flatten\": true,\n          \"unique\": true\n        });\n      }\n      return async.mapSeries(queries, (function(data, callback) {\n        return crawl.retrieve(data, function(wiki) {\n          return callback(null, {\n            \"original\": data.name,\n            \"results\": wiki.body.results,\n            \"query\": wiki.query\n          });\n        });\n      }), function(err, results) {\n        res.json({\n          \"text\": text,\n          \"names\": results\n        });\n      });\n    });\n  };\n\n}).call(this);\n"],"file":"controller.js"}