{"version":3,"sources":["controller.js"],"names":["crawl","spawn","require","exports","retrieve","req","res","r","params","name","send","result","json","body","results","ner","pythonProcess","text","query","stdout","on","data","call"],"mappings":";;AAAA,CAAC,YAAW;AACV;;AACA,MAAIA,KAAJ,EAAWC,KAAX;AAEAD,EAAAA,KAAK,GAAGE,OAAO,CAAC,gCAAD,CAAf;AAEAD,EAAAA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAjC;;AAEAE,EAAAA,OAAO,CAACC,QAAR,GAAmB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACpC,QAAIC,CAAJ;;AACA,QAAI,CAACF,GAAG,CAACG,MAAJ,CAAWC,IAAhB,EAAsB;AACpBH,MAAAA,GAAG,CAACI,IAAJ,CAAS,cAAT;AACA;AACD;;AACDH,IAAAA,CAAC,GAAG;AACF,wBAAWF,GAAG,CAACG,MAAJ,CAAWC,IAAtB,CADE;AAEF,qBAAe;AACb,iBAAS,aADI;AAEb,oBAAY;AAFC,OAFb;AAMF,oBAAc,CACZ;AACE,gBAAQ,KADV;AAEE,iBAAS;AAFX,OADY,EAKZ;AACE,gBAAQ,KADV;AAEE,iBAAS;AAFX,OALY,EASZ;AACE,gBAAQ,KADV;AAEE,iBAAS;AAFX,OATY,EAaZ;AACE,gBAAQ,MADV;AAEE,iBAAS,YAFX;AAGE,oBAAY;AAHd,OAbY,EAkBZ;AACE,gBAAQ,MADV;AAEE,iBAAS,UAFX;AAGE,oBAAY,IAHd;AAIE,kBAAU;AAJZ,OAlBY,EAwBZ;AACE,gBAAQ,MADV;AAEE,iBAAS,UAFX;AAGE,oBAAY,IAHd;AAIE,kBAAU;AAJZ,OAxBY,CANZ;AAqCF,eAAS,IArCP;AAsCF,cAAQ,IAtCN;AAuCF,iBAAW,IAvCT;AAwCF,gBAAU;AAxCR,KAAJ;AA0CAT,IAAAA,KAAK,CAACI,QAAN,CAAeG,CAAf,EAAkB,UAASI,MAAT,EAAiB;AACjCL,MAAAA,GAAG,CAACM,IAAJ,CAASD,MAAM,CAACE,IAAP,CAAYC,OAArB;AACD,KAFD;AAGD,GAnDD;;AAqDAX,EAAAA,OAAO,CAACY,GAAR,GAAc,UAASV,GAAT,EAAcC,GAAd,EAAmB;AAC/B,QAAIU,aAAJ,EAAmBC,IAAnB;AACAA,IAAAA,IAAI,GAAGZ,GAAG,CAACa,KAAJ,CAAU,MAAV,CAAP;;AACA,QAAI,CAACD,IAAL,EAAW;AACTX,MAAAA,GAAG,CAACI,IAAJ,CAAS,cAAT;AACA;AACD,KAN8B,CAO/B;;;AACAM,IAAAA,aAAa,GAAGf,KAAK,CAAC,SAAD,EAAY,CAAC,kDAAD,EAAqDgB,IAArD,CAAZ,CAArB;AACAD,IAAAA,aAAa,CAACG,MAAd,CAAqBC,EAArB,CAAwB,MAAxB,EAAgC,UAASC,IAAT,EAAe;AAC7Cf,MAAAA,GAAG,CAACI,IAAJ,CAASW,IAAT;AACD,KAFD;AAGD,GAZD;AAcD,CA3ED,EA2EGC,IA3EH","sourcesContent":["(function() {\n  'use strict';\n  var crawl, spawn;\n\n  crawl = require('../../crawl/build/crawl.min.js');\n\n  spawn = require(\"child_process\").spawn;\n\n  exports.retrieve = function(req, res) {\n    var r;\n    if (!req.params.name) {\n      res.send(\"Wrong input.\");\n      return;\n    }\n    r = {\n      \"name\": `${req.params.name}`,\n      \"description\": {\n        \"label\": \"description\",\n        \"stopword\": true\n      },\n      \"properties\": [\n        {\n          \"name\": \"P19\",\n          \"label\": \"placeofbirth\"\n        },\n        {\n          \"name\": \"P21\",\n          \"label\": \"sex\"\n        },\n        {\n          \"name\": \"P20\",\n          \"label\": \"placeofdeath\"\n        },\n        {\n          \"name\": \"P106\",\n          \"label\": \"occupation\",\n          \"stopword\": true\n        },\n        {\n          \"name\": \"P108\",\n          \"label\": \"employer\",\n          \"stopword\": true,\n          \"unique\": true\n        },\n        {\n          \"name\": \"P463\",\n          \"label\": \"memberof\",\n          \"stopword\": true,\n          \"unique\": true\n        }\n      ],\n      \"limit\": 1000,\n      \"lang\": \"en\",\n      \"flatten\": true,\n      \"unique\": true\n    };\n    crawl.retrieve(r, function(result) {\n      res.json(result.body.results);\n    });\n  };\n\n  exports.ner = function(req, res) {\n    var pythonProcess, text;\n    text = req.query['text'];\n    if (!text) {\n      res.send(\"Wrong input.\");\n      return;\n    }\n    // python ner\n    pythonProcess = spawn('python3', [\"/home/uno/repos/TextMining/ner/detect-persons.py\", text]);\n    pythonProcess.stdout.on('data', function(data) {\n      res.send(data);\n    });\n  };\n\n}).call(this);\n"],"file":"controller.js"}