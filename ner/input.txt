A Survey on Network Embedding

Peng Cui1, Xiao Wang1, Jian Pei2, Wenwu Zhu1

1Department of Computer Science and Technology, Tsinghua University, China

2School of Computing Science, Simon Fraser University, Canada

cuip@tsinghua.edu.cn, wangxiao007@mail.tsinghua.edu.cn,

jpei@cs.sfu.ca, wwzhu@tsinghua.edu.cn

7
1
0
2

 

v
o
N
3
2

 

 
 
]
I
S
.
s
c
[
 
 

1
v
2
5
7
8
0

.

1
1
7
1
:
v
i
X
r
a

Abstract

Network embedding assigns nodes in a network to low-
dimensional representations and effectively preserves the
network structure. Recently, a signiﬁcant amount of pro-
gresses have been made toward this emerging network anal-
ysis paradigm. In this survey, we focus on categorizing and
then reviewing the current development on network embed-
ding methods, and point out its future research directions.
We ﬁrst summarize the motivation of network embedding.
We discuss the classical graph embedding algorithms and
their relationship with network embedding. Afterwards and
primarily, we provide a comprehensive overview of a large
number of network embedding methods in a systematic man-
ner, covering the structure- and property-preserving network
embedding methods, the network embedding methods with
side information and the advanced information preserving
network embedding methods. Moreover, several evaluation
approaches for network embedding and some useful online
resources, including the network data sets and softwares, are
reviewed, too. Finally, we discuss the framework of exploit-
ing these network embedding methods to build an effective
system and point out some potential future directions.

1 Introduction

Many complex systems take the form of networks, such as
social networks, biological networks, and information net-
works. It is well recognized that network data is often so-
phisticated and thus is challenging to deal with. To process
network data effectively, the ﬁrst critical challenge is to ﬁnd
effective network data representation, that is, how to rep-
resent networks concisely so that advanced analytic tasks,
such as pattern discovery, analysis and prediction, can be
conducted efﬁciently in both time and space.

Traditionally, we usually represent a network as a graph
G = hV, Ei, where V is a vertex set representing the nodes
in a network, and E is an edge set representing the relation-
ships among the nodes. For large networks, such as those
with billions of nodes, the traditional network representation
poses several challenges to network processing and analysis.
• High computational complexity. The nodes in a network
are related to each other to a certain degree, encoded by
the edge set E in the traditional network representation.

Copyright c(cid:13) 2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

These relationships cause most of the network process-
ing or analysis algorithms either iterative or combinato-
rial computation steps, which result in high computational
complexity. For example, a popular way is to use the
shortest or average path length between two nodes to rep-
resent their distance. To compute such a distance using the
traditional network representation, we have to enumerate
many possible paths between two nodes, which is in na-
ture a combinatorial problem. As another example, many
studies assume that a node with links to important nodes
tends to be important, and vice versa. In order to evalu-
ate the importance of a node using the traditional network
representation, we have to iteratively conduct a stochastic
node traversal process until reaching a convergence. Such
methods using the traditional network representation re-
sult in high computational complexity that prevents them
from being applicable to large-scale real-world networks.

• Low parallelizability. Parallel and distributed comput-
ing is de facto to process and analyze large-scale data.
Network data represented in the traditional way, how-
ever, casts severe difﬁculties to design and implementa-
tion of parallel and distributed algorithms. The bottleneck
is that nodes in a network are coupled to each other ex-
plicitly reﬂected by E. Thus, distributing different nodes
in different shards or servers often causes demandingly
high communication cost among servers, and holds back
speed-up ratio. Although some limited progress is made
on graph parallelization by subtly segmenting large-scale
graphs (Staudt, Sazonovs, and Meyerhenke ), the luck of
these methods heavily depends on the topological charac-
teristics of the underlying graphs.

• Inapplicability of machine learning methods. Recently,
machine learning methods, especially deep learning, are
very powerful in many areas. These methods provide stan-
dard, general and effective solutions to a broad range of
problems. For network data represented in the traditional
way, however, most of the off-the-shelf machine learning
methods may not applicable. Those methods usually as-
sume that data samples can be represented by indepen-
dent vectors in a vector space, while the samples in net-
work data (i.e., the nodes) are dependant to each other
to some degree determined by E. Although we can sim-
ply represent a node by its corresponding row vector in

the adjacency matrix of the network, the extremely high
dimensionality of such a representation in a large graph
with many nodes makes the in sequel network processing
and analysis difﬁcult.

The traditional network representation has become a
bottleneck in large-scale network processing and analysis
nowadays. Representing the relationships explicitly using a
set of edges in the traditional representation is the upmost
barrier.

To tackle the challenge, substantial effort has been com-
mitted to develop novel network embedding, i.e., learning
low-dimensional vector representations for network nodes.
In the network embedding space, the relationships among
the nodes, which were originally represented by edges or
other high-order topological measures in graphs, is captured
by the distances between nodes in the vector space, and the
topological and structural characteristics of a node are en-
coded into its embedding vector. An example is shown in
Fig. 1. After embedding the karate club network into a two-
dimensional space, the similar nodes marked by the same
color are close to each other in the embedding space, demon-
strating that the network structure can be well modeled in the
two-dimensional embedding space.

Network embedding, as a promising way of network
representation, is capable of supporting subsequent net-
work processing and analysis tasks such as node classiﬁca-
tion (Sen et al. 2008; Perozzi, Al-Rfou, and Skiena 2014),
node clustering (Wang et al. 2017b), network visualiza-
tion (Herman, Melanc¸on, and Marshall 2000; Wang, Cui,
and Zhu 2016) and link prediction (Liben-Nowell and Klein-
berg 2007; Ou et al. 2016). If this goal is fulﬁlled, the advan-
tages of network embedding over traditional network repre-
sentation methods are apparent, as shown in Fig. 2. The tra-
ditional topology based network representation usually di-
rectly uses the observed adjacency matrix, which may con-
tain noise or redundant information. The embedding based
representation ﬁrst aims to learn the dense and continuous
representations of nodes in a low dimensional space, so that
the noise or redundant information can be reduced and the
intrinsic structure information can be preserved. As each
node is represented by a vector containing its information
of interest, many iterative or combinatorial problems in net-
work analysis can be tackled by computing mapping func-
tions, distance metrics or operations on the embedding vec-
tors, and thus avoid high complexity. As the nodes are not
coupling any more, it is convenient to apply main-stream
parallel computing solutions for large-scale network analy-
sis. Furthermore, network embedding can open the oppor-
tunities for network analysis to be beneﬁted from the rich
literature of machine learning. Many off-the-shelf machine
learning methods such as deep learning models can be di-
rectly applied to solve network problems.

In order to make the embedding space well support net-
work analysis tasks, there are two goals for network embed-
ding. First, the original network can be reconstructed from
the learned embedding space. It requires that, if there is an
edge or relationship between two nodes, then the distance
of these two nodes in the embedding space should be rel-

(a) Input: karate network

1 4

2 0

1

2 2

1 8

4

2

8

1 2

1 3

5

1 1

7

6

1 7

0 .6

3 1

1 0

0 .8

2 1

1 5

2 3

9

1 9

1 6

2 9

3

1 .0

3 3

3 2

1 .2

2 7

2 4

3 0

3 4

2 8

1 .4

1 .6

1 .8

2 6

2 5

1 .0

0 .5

0 .0

0 .5

1 .0

1 .5

2 .0

2 .5

(b) Output: representations

Figure 1: An example of network embedding on a karate
network. Images are extracted from DeepWalk (Perozzi, Al-
Rfou, and Skiena 2014).

atively small. In this way, the network relationships can be
well preserved. Second, the learned embedding space can
effectively support network inference, such as predicting un-
seen links, identifying important nodes, and inferring node
labels. It should be noted that an embedding space with only
the goal of network reconstruction is not sufﬁcient for net-
work inference. Taking the link prediction problem as an ex-
ample, if we only consider the goal of network reconstruc-
tion, the embedding vectors learned by SVD tend to ﬁt all
the observed links and zero values in the adjacency matrix,
which may lead to overﬁtting and cannot infer unseen links.
In this paper, we survey the state-of-the-art works on net-
work embedding and point out future research directions. In
Section 2, we ﬁrst categorize network embedding methods
according to the types of information preserved in embed-
ding, and summarize the commonly used models. We brieﬂy
review the traditional graph embedding methods and dis-
cuss the difference of these methods with the recent network
embedding methods in Section 3. Then, in Sections 4, 5
and 6, we respectively review the methods on structure and
property preserving network embedding, network embed-
ding with side information, as well as advanced information
preserving network embedding. In Section 7, we present a
few evaluation scenarios and some online resources, includ-
ing the data sets and codes, for network embedding. We con-
clude and discuss a series of possible future directions in
Section 8.

2 Categorization and The Models

To support network inference, more information beyond
nodes and links needs to be preserved in embedding space.

Figure 2: A comparison between network topology based network analysis and network embedding based network analysis.

Most research works on network embedding develop along
this line in recent years. There are multiple ways to cate-
gorize them. In this paper, according to the types of infor-
mation that are preserved in network embedding, we cate-
gorize the existing methods into three categories, that is, (1)
network structure and properties preserving network embed-
ding, (2) network embedding with side information and (3)
advanced information preserving network embedding.

The Categorization of Network Embedding
Methods

As mentioned before, network embedding usually has two
goals, i.e., network reconstruction and network inference.
The traditional graph embedding methods, mainly focusing
on network reconstruction, has been widely studied. We will
brieﬂy review those methods in Section 3. Fu and Ma (Fu
and Ma 2012) present a more detailed survey. In this pa-
per, we focus on the recently proposed network embedding
methods aiming to address the goal of network inference.
The categorization structure of the related works is shown in
Fig. 3.

Structure and property preserving network embedding
Among all the information encoded in a network, network
structures and properties are two crucial factors that largely
affect network inference. Consider a network with only
topology information. Many network analysis tasks, such
as identifying important nodes and predicting unseen links,
can be conducted in the original network space. However, as
mentioned before, directly conducting these tasks based on
network topology has a series of problems, and thus poses a
question that whether we can learn a network embedding
space purely based on the network topology information,
such that these tasks can be well supported in this low di-
mensional space. Motivated by this, attempts are proposed
to preserve rich structural information into network embed-
ding, from nodes and links (Tang et al. 2015) to neighbor-
hood structure (Perozzi, Al-Rfou, and Skiena 2014), high-
order proximities of nodes (Wang, Cui, and Zhu 2016),
and community structures (Wang et al. 2017b). All these

types of structural information have been demonstrated use-
ful and necessary in various network analysis tasks. Besides
this structural information, network properties in the orig-
inal network space are not ignorable in modeling the for-
mation and evolution of networks. To name a few, network
transitivity (i.e. triangle closure) is the driving force of link
formation in networks (Huang et al. 2014), and structural
balance property plays an important role in the evolution of
signed networks (Cartwright and Harary 1956). Preserving
these properties in a network embedding space is, however,
challenging due to the inhomogeneity between the network
space and the embedding vector space. Some recent studies
begin to look into this problem and demonstrate the possi-
bility of aligning these two spaces at the property level (Ou
et al. 2016; Wang et al. 2017a).

Network Embedding with Side Information Besides
network topology, some types of networks are accompa-
nied with rich side information, such as node content or
labels in information networks (Tu et al. 2016), node and
edge attributes in social networks (Yang et al. 2015), as
well as node types in heterogeneous networks (Chang et
al. 2015). Side information provides useful clues for char-
acterizing relationships among network nodes, and thus is
helpful in learning embedding vector spaces. In the cases
where the network topology is relatively sparse, the im-
portance of the side information as complementary infor-
mation sources is even more substantial. Methodologically,
the main challenge is how to integrate and balance the
topological and side information in network embedding.
Some multimodal and multisource fusion techniques are ex-
plored in this line of research (Natarajan and Dhillon 2014;
Yang et al. 2015).

Advanced Information Preserving Network Embedding
In the previous two categories, most methods learn network
embedding in an unsupervised manner. That is, we only take
the network structure, properties, and side information into
account, and try to learn an embedding space to preserve
the information. In this way, the learned embedding space

Figure 3: An overview of different settings of network embedding.

is general and, hopefully, able to support various network
applications. If we regard network embedding as a way of
network representation learning, the formation of the repre-
sentation space can be further optimized and conﬁned to-
wards different target problems. Realizing this idea leads
to supervised or pseudo supervised information (i.e. the ad-
vanced information) in the target scenarios. Directly design-
ing a framework of representation learning for a particular
target scenario is also known as an end-to-end solution (Li et
al. 2017), where high-quality supervised information is ex-
ploited to learn the latent representation space from scratch.
End-to-end solutions have demonstrated their advantages in
some ﬁelds, such as computer vision (Yeung et al. 2016) and
natural language processing (NLP) (Yang et al. 2017). Sim-
ilar ideas are also feasible for network applications. Taking
the network node classiﬁcation problem as an example, if we
have the labels of some network nodes, we can design a so-
lution with network structure as input, node labels as super-
vised information, and embedding representation as latent
middle layer, and the resulted network embedding is speciﬁc
for node classiﬁcation. Some recent works demonstrate the
feasibility in applications such as cascading prediction (Li et
al. 2017), anomaly detection (Hu et al. 2016), network align-
ment (Man et al. 2016) and collaboration prediction (Chen
and Sun 2017).

In general, network structures and properties are the fun-
damental factors that need to be considered in network em-
bedding. Meanwhile, side information on nodes and links, as
well as advanced information from target problem is helpful
to enable the learned network embedding work well in real
applications.

Commonly Used Models in Network Embedding
To transform networks from original network space to em-
bedding space, different models can be adopted to incorpo-
rate different types of information or address different goals.
The commonly used models include matrix factorization,
random walk, deep neural networks and their variations.

Matrix Factorization An adjacency matrix is commonly
used to represent the topology of a network, where each col-
umn and each row represent a node, and the matrix entries
indicate the relationships among nodes. We can simply use a
row vector or column vector as the vector representation of a
node, but the formed representation space is N -dimensional,
where N is the total number of nodes. Network embedding,
aiming to learn a low-dimensional vector space for a net-
work, is eventually to ﬁnd a low-rank space to represent a
network, in contrast with the N -dimensional space. In this
sense, matrix factorization methods, with the same goal of
learning low-rank space for the original matrix, can naturally
be applied to solve this problem. In the series of matrix fac-
torization models, Singular Value Decomposition (SVD) is
commonly used in network embedding due to its optimality
for low-rank approximation (Ou et al. 2016). Non-negative
matrix factorization is often used because of its advantages
as an additive model (Wang et al. 2017b).

Random Walk As mentioned before, preserving network
structure is a fundamental requirement for network embed-
ding. Neighborhood structure, describing the local structural
characteristics of a node, is important for network embed-
ding. Although the adjacency vector of a node encodes the
ﬁrst-order neighborhood structure of a node, it is usually
a sparse, discrete, and high-dimensional vector due to the
nature of sparseness in large-scale networks. Such a repre-
sentation is not friendly to subsequent applications. In the
ﬁeld of natural language processing (NLP), the word repre-
sentation also suffers from similar drawbacks. The develop-
ment of Word2Vector (Mikolov et al. 2013b) signiﬁcantly
improves the effectiveness of word representation by trans-
forming sparse, discrete and high-dimensional vectors into
dense, continuous and low-dimensional vectors. The intu-
ition of Word2Vector is that a word vector should be able
to reconstruct the vectors of its neighborhood words which
are deﬁned by co-occurence rate. Some methods in network
embedding borrow these ideas. The key problem is how to
deﬁne “neighborhood” in networks.

To make analogy with Word2Vector, random walk models
are exploited to generate random paths over a network. By
regarding a node as a word, we can regard a random path as
a sentence, and the node neighborhood can be identiﬁed by
co-occurence rate as in Word2Vector. Some representative
methods include DeepWalk (Perozzi, Al-Rfou, and Skiena
2014) and Node2Vec (Grover and Leskovec 2016).

Deep Neural Networks By deﬁnition, network embed-
ding is to transform the original network space into a low-
dimensional vector space. The intrinsic problem is to learn a
mapping function between these two spaces. Some methods,
like matrix factorization, assume the mapping function to be
linear. However, the formation process of a network is com-
plicated and highly nonlinear, thus a linear function may not
be adequate to map the original network to an embedding
space.

If seeking for an effective non-linear function learning
model, deep neural networks are certainly useful options be-
cause of their huge successes in other ﬁelds. The key chal-
lenges are how to make deep models ﬁt network data, and
how to impose network structure and property-level con-
straints on deep models. Some representative methods, such
as SDNE (Wang, Cui, and Zhu 2016), SDAE (Cao, Lu, and
Xu 2016), and SiNE (Wang et al. 2017a), propose deep
learning models for network embedding to address these
challenges. At the same time, deep neural networks are also
well known for their advantages in providing end-to-end so-
lutions. Therefore, in the problems where advanced infor-
mation is available, it is natural to exploit deep models to
come up with an end-to-end network embedding solution.
For instance, some deep model based end-to-end solutions
are proposed for cascade prediction (Li et al. 2017) and net-
work alignment (Man et al. 2016).

The network embedding models are not limited to those
mentioned in this subsection. Moreover, the three kinds of
models are not mutually exclusive, and their combinations
are possible to make new solutions. More models and details
will be discussed in later sections.

3 Network Embedding v.s. Graph

Embedding

The goal of graph embedding is similar as network embed-
ding, that is, to embed a graph into a low-dimensional vector
space (Yan et al. 2005). There is a rich literature in graph em-
bedding. Fu and Ma (Fu and Ma 2012) provide a thorough
review on the traditional graph embedding methods. Here
we only present some representative and classical methods
on graph embedding, aiming to demonstrate the critical dif-
ferences between graph embedding and the current network
embedding.

Representative Graph Embedding Methods

Graph embedding methods are originally studied as dimen-
sion reduction techniques. A graph is usually constructed
from a feature represented data set, like image data set.
Isomap (Tenenbaum, De Silva, and Langford 2000) ﬁrst

constructs a neighborhood graph G using connectivity algo-
rithms such as K nearest neighbors (KNN), i.e., connecting
data entries i and j if i is one of the K nearest neighbors
of j. Then based on G, the shortest path dG
ij of entries i and
j in G can be computed. Consequently, for all the N data
entries in the data set, we have the matrix of graph distances
DG = {dG
ij}. Finally, the classical multidimensional scal-
ing (MDS) method is applied to DG to obtain the coordinate
vector ui for entry i, which aims to minimize the following
function:

N

X

N

X

i=1

j=1

(dG
ij − kui − ujk)2.

(1)

Indeed, Isomap learns the representation ui of entry i, which
approximately preserves the geodesic distances of the entry
pairs in the low-dimensional space.

The key problem of Isomap is its high complexity due
to the computing of pair-wise shortest pathes. Locally lin-
ear embedding (LLE) (Roweis and Saul 2000) is proposed
to eliminate the need to estimate the pairwise distances be-
tween widely separated entries. LLE assumes that each entry
and its neighbors lie on or close to a locally linear patch of a
mainfold. To characterize the local geometry, each entry can
be reconstructed from its neighbors as follows:

W X
min

i

kxi − X

j

Wij xjk2,

(2)

where the weight Wij measures the contribution of the en-
try xj to the reconstruction of entry xi. Finally, in the
low-dimensional space, LLE constructs a neighborhood-
preserving mapping based on locally linear reconstruction
as follows:

U X
min

i

kui − X

j

Wij ujk2.

(3)

By optimizing the above function, the low-dimensional rep-
resentation matrix U, which preserves the neighborhood
structure, can be obtained.

Laplacian eigenmaps (LE) (Belkin and Niyogi 2002) also
begins with constructing a graph using ǫ-neighborhoods or
K nearest neighbors. Then the heat kernel (Berline, Getzler,
and Vergne 2003) is utilized to choose the weight Wij of
nodes i and j in the graph. Finally, the representation ui of
node i can be obtained by minimizing the following func-
tion:

kui − ujk2Wij = tr(UT LU),

(4)

X

i,j

where L = D − W is the Laplacian matrix, and D is the
diagonal matrix with Dii = Pj Wji. In addition, the con-
straint UT DU = I is introduced to avoid trivial solutions.
Furthermore, the locality preserving projection (LPP) (He
and Niyogi 2004), a linear approximation of the nonlinear
LE, is proposed. Also, it introduces a transformation matrix
A such that the representation ui of entry xi is ui = AT xi.
LPP computes the transformation matrix A ﬁrst, and ﬁnally
the representation ui can be obtained.

These methods are extended in the rich literature of graph
embedding by considering different characteristics of the
constructed graphs (Fu and Ma 2012).

Figure 4: Overview of DeepWalk. Image extracted from (Perozzi, Al-Rfou, and Skiena 2014).

Major Differences

Network embedding and graph embedding have substantial
differences in objective and assumptions. As mentioned be-
fore, network embedding has two goals, i.e. reconstructing
original networks and support network inference. The ob-
jective functions of graph embedding methods mainly tar-
get the goal of graph reconstruction. As discussed before,
the embedding space learned for network reconstruction is
not necessarily good for network inference. Therefore, graph
embedding can be regarded as a special case of network em-
bedding, and the recent research progress on network em-
bedding pays more attention to network inference.

Moreover, graph embedding mostly works on graphs con-
structed from feature represented data sets, where the prox-
imity among nodes encoded by the edge weights are well de-
ﬁned in the original feature space. In contrast, network em-
bedding mostly works on naturally formed networks, such
as social networks, biology networks, and e-commerce net-
works. In those networks, the proximities among nodes are
not explicitly or directly deﬁned. The deﬁnition of node
proximities depends on speciﬁc analytic tasks and applica-
tion scenarios. Therefore, we have to incorporate rich infor-
mation, such as network structures, properties, side infor-
mation and advanced information, in network embedding to
facilitate different problems and applications.

In the rest of the paper, we mainly focus on the network
embedding methods with the goal of supporting network in-
ference.

4 Structure and Property Preserving

Network Embedding

In essence, one basic requirement of network embedding
is to appropriately preserve network structures and cap-
ture properties of networks. Often, network structures in-
clude ﬁrst-order structure and higher-order structure, such as
second-order structure and community structure. Networks
with different types have different properties. For example,
directed networks have the asymmetric transitivity property.
The structural balance theory is widely applicable to signed
networks.

In this section, we review the representative methods of

structure preserving network embedding and property pre-
serving network embedding.

Structure Preserving Network Embedding
Network structures can be categorized into different groups
that present at different granularities. The commonly ex-
ploited network structures in network embedding include
neighborhood structure, high-order node proximity and net-
work communities.

Neighborhood Structures and High-order Node Proxim-
ity DeepWalk (Perozzi, Al-Rfou, and Skiena 2014) is pro-
posed for learning the representations of nodes in a network,
which is able to preserve the neighbor structures of nodes.
DeepWalk discovers that the distribution of nodes appearing
in short random walks is similar to the distribution of words
in natural language. Motivated by this observation, Skip-
Gram model (Mikolov et al. 2013b), a widely used word
representation learning model, is adopted by DeepWalk to
learn the representations of nodes. Speciﬁcally, as shown in
Fig. 4, DeepWalk adopts a truncated random walk on a net-
work to generate a set of walk sequences. For each walk
sequence s = {v1, v2, ..., vs}, following Skip-Gram, Deep-
Walk aims to maximize the probability of the neighbors of
node vi in this walk sequence as follows:

max

φ

P r({vi−w, ..., vi+w}\vi|φ(vi)) = Πi+w

j=i−w,j6=iP r(vj|φ(vi)),

(5)
where w is the window size, φ(vi) is the current representa-
tion of vi and {vi−w, ..., vi+w}\vi is the local context nodes
of vi. Finally, hierarchical soft-max (Mikolov et al. 2013a)
is used to efﬁciently infer the embeddings.

Node2vec (Grover and Leskovec 2016) demonstrates that
DeepWalk is not expressive enough to capture the diversity
of connectivity patterns in a network. Node2vec deﬁnes a
ﬂexible notion of a node’s network neighborhood and de-
signs a second order random walk strategy to sample the
neighborhood nodes, which can smoothly interpolate be-
tween breadth-ﬁrst sampling (BFS) and depth-ﬁrst sampling
(DFS). Node2vec is able to learn the representations that
embed nodes with same network community closely, and to
learn representations where nodes sharing similar roles have
similar embeddings.

where σ(x) = (1 + e−x)−1, pk(V ) is the distribution over
the nodes in the network and j′ is the node obtained from
negative sampling. Furthermore, GraRep reformulates the
loss function as the matrix factorization problem, for each
k-step loss function, SVD can be directly used to infer the
representations of nodes. By concentrating the representa-
tions learned from each function, the global representations
can be obtained.

Network Communities Wang et al. (Wang et al. 2017b)
propose a modularized nonnegative matrix factorization (M-
NMF) model for network embedding, which aims to pre-
serve both the microscopic structure, i.e., the ﬁrst-order and
second-order proximities of nodes, and the mesoscopic com-
munity structure (Girvan and Newman 2002). To preserve
the microscopic structure, they adopt the NMF model (Lee
and Seung 2001) to factorize the pairwise node similarity
matrix and learn the representations of nodes. Meanwhile,
the community structure is detected by modularity maxi-
mization (Newman 2006). Then, based on the assumption
that if the representation of a node is similar to that of a com-
munity, the node may have a high propensity to be in this
community, they introduce an auxiliary community repre-
sentation matrix to bridge the representations of nodes with
the community structure. In this way, the learned representa-
tions of nodes are constrained by both the microscopic struc-
ture and community structure, which contains more struc-
tural information and becomes more discriminative.

The aforementioned methods mainly adopt

the shal-
low models, consequently, the representation ability is lim-
ited. SDNE (Wang, Cui, and Zhu 2016) proposes a deep
model for network embedding, so as to address the high
non-linearity, structure-preserving, and sparsity issues. The
framework is shown in Fig. 6. Speciﬁcally, SDNE uses the
deep autoencoder with multiple non-linear layers to preserve
the neighbor structures of nodes. Given the input adjacency
nodes xi of node i, the hidden representations for each layer
can be obtained by

(1)
i = σ(W(1)xi + b(1))
y
i = σ(W(k)y(k−1)
y(k)

i

+ b(k)), k = 2, ..., K.

(9)

Then the output representation ˆxi can be obtained by re-
versing the calculation process of encoder. To impose more
penalty to the reconstruction error of the non-zero elements
than that of zero elements, SDNE introduces the penalty
vector bi = {bij}n
j=1 (bij is larger than a threshold if there is
an edge between nodes i and j) and gives rise to the follow-
ing function that can preserve the second-order proximity

L2nd = X

i

k(ˆxi − xi) ⊙ bik2.

(10)

To preserve the ﬁrst-order proximity of nodes, the idea of
Laplacian eigenmaps (Belkin and Niyogi 2002) is adopted.
By exploiting the ﬁrst-order and second-order proximities
jointly into the learning process, the representations of nodes
can be ﬁnally obtained.

Cao et al. (Cao, Lu, and Xu 2016) propose a network
embedding method to capture the weighted graph structure

Figure 5: An example of the ﬁrst-order and second-order
structures in a network. Image extracted from (Tang et al.
2015).

LINE (Tang et al. 2015) is proposed for large scale net-
work embedding, and can preserve the ﬁrst and second order
proximities. The ﬁrst order proximity is the observed pair-
wise proximity between two nodes, such as the observed
edge between nodes 6 and 7 in Fig. 5. The second order
proximity is determined by the similarity of the “contexts”
(neighbors) of two nodes. For example, the second order
similarity between nodes 5 and 6 can be obtained by their
neighborhoods 1, 2, 3, and 4 in Fig. 5. Both the ﬁrst or-
der and second order proximities are important in measuring
the relationships between two nodes. The ﬁrst order prox-
imity can be measured by the joint probability distribution
between two nodes vi and vj as

p1(vi, vj) =

.

(6)

1

1 + exp(−uT

i uj)

The second order proximity is modeled by the probability of
the context node vj being generated by node vi, that is,

p2(vj|vi) =

exp(¯uT
j ¯ui)
Pk exp(¯uT

k ¯ui))

.

(7)

The conditional distribution implies that nodes with similar
distributions over the contexts are similar to each other. By
minimizing the KL-divergence of the two distributions and
the empirical distributions respectively, the representations
of nodes that are able to preserve the ﬁrst and second order
proximities can be obtained.

Considering that LINE only preserves the ﬁrst-order and
second-order proximities, GraRep (Cao, Lu, and Xu 2015)
demonstrates that k-step (k > 2) proximities should also
be captured when constructing the global representations of
nodes. Given the adjacency matrix A, the k-step probability
transition matrix can be computed by Ak = A...A
, whose
| {z }k

element Ak
ij refers to the transition probability pk(j|i) from
a current node i to a context node j and the transition con-
sists of k steps. Moreover, motivated by the Skip-Gram
model (Mikolov et al. 2013b), the k-step loss function of
node i is deﬁned as
Lk(i) = (X

j ui))+λEj′∼pk(V )[log σ(−uT

pk(j|i) log σ(uT

j

i uj′ )],

(8)

Ou et al. (Ou et al. 2015) aim to preserve the non-
transitivity property via latent similarity components. The
non-transitivity property declares that, for nodes A, B and
C in a network where (A, B) and (B, C) are similar pairs,
(A, C) may be a dissimilar pair. For example, in a social
network, a student may connect with his classmates and his
family, while his classmates and family are probably very
different. To address this, they use a set of linear projec-
tion matrices to extract M hash tables, and thus, each pair
of nodes can have M similarities {Sm
m=1 based on those
hash tables. Then the ﬁnal similarity between two nodes can
be aggregated from {Sm
m=1. Finally they approximate the
aggregated similarity to the semantic similarity based on the
observation that if two nodes have a large semantic similar-
ity, at least one of the similarities Sm
ij from the hash tables is
large, otherwise, all of the similarities are small.

ij }M

ij }M

Preserving the asymmetric transitivity property of di-
rected network is considered by HOPE (Ou et al. 2016).
Asymmetric transitivity indicates that, if there is a directed
edge from node i to node j and a directed edge from j to v,
there is likely a directed edge from i to v, but not from v to i.
In order to measure this high-order proximity, HOPE sum-
marizes four measurements in a general formulation, that is,
Katz Index (Katz 1953), Rooted PageRank (Liben-Nowell
and Kleinberg 2007), Common Neighbors (Liben-Nowell
and Kleinberg 2007), and Adamic-Adar (Adamic and Adar
2003). With the high-order proximity, SVD can be directly
applied to obtain the low dimensional representations. Fur-
thermore, the general formulation of high-order proximity
enables HOPE to transform the original SVD problem into a
generalized SVD problem (Paige and Saunders 1981), such
that the time complexity of HOPE is largely reduced, which
means HOPE is scalable for large scale networks.

SiNE (Wang et al. 2017a) is proposed for signed net-
work embedding, which considers both positive and nega-
tive edges in a network. Due to the negative edges, the so-
cial theories on signed network, such as structural balance
theory (Cartwright and Harary 1956; Cygan et al. 2015), are
very different from the unsigned network. The structural bal-
ance theory demonstrates that users in a signed social net-
work should be able to have their “friends” closer than their
“foes”. In other words, given a triplet (vi, vj, vk) with edges
eij = 1 and eik = −1, the similarity f (vi, vj) between
nodes vi and vj is larger than f (vi, vk). To model the struc-
tural balance phenomenon, a deep learning model consisting
of two deep networks with non-linear functions is designed
to learn the embeddings and preserve the network structure
property, which is consistent with the extended structural
balance theory. The framework is shown in Fig. 8.

The methods reviewed in this subsection demonstrate the
importance of maintaining network properties in network
embedding space, especially the properties that largely af-
fect the evolution and formation of networks. The key chal-
lenge in is how to address the disparity and heterogeneity of
the original network space and the embedding vector space
at property level.

Figure 6: The framework of SDNE.
from (Wang, Cui, and Zhu 2016).

Image extracted

and represent nodes of non-linear structures. As shown in
Fig. 7, instead of adopting the previous sampling strategy
that needs to determine certain hyper parameters, they con-
siders a random surﬁng model motivated by the PageRank
model. Based on this random surﬁng model, the represen-
tation of a node can be initiatively constructed by combin-
ing the weighted transition probability matrix. After that, the
PPMI matrix (Levy and Goldberg 2014) can be computed.
Finally, the stacked denoising autoencoders (Vincent et al.
2010) that partially corrupt the input data before taking the
training step are applied to learn the latent representations.

In order to make a general framework on network em-
bedding, Chen et al. (Chen et al. 2017) propose a network
embedding framework that uniﬁes some of the previous al-
gorithms, such as LE, DeepWalk and Node2vec. The pro-
posed framework, denoted by GEM-D[h(·), g(·), d(·,·)], in-
volves three important building blocks: h(·) is a node prox-
imity function based on the adjacency matrix; g(·) is a warp-
ing function that warps the inner products of network em-
beddings; and d(·,·) measures the differences between h
and g. Furthermore, they demonstrate that the high-order
proximity for h(·) and the exponential function for g(·) are
more important for a network embedding algorithm. Based
on these observations, they propose UltimateWalk=GEM-
D[Q(L), exp(x), dwf (·,·)], where Q(L)
is a ﬁnite-step
transition matrix, exp(x) is an exponential function and
dwf (·,·) is the warped Frobenius norm.
In summary, many network embedding methods aim to
preserve the local structure of a node, including neighbor-
hood structure, high-order proximity as well as commu-
nity structure, in the latent low-dimensional space. Both lin-
ear and non-linear models are attempted, demonstrating the
large potential of deep models in network embedding.

Property Preserving Network Embedding

Among the rich network properties, the properties that are
crucial for network inference are the focus in property pre-
serving network embedding. Speciﬁcally, most of the exist-
ing property preserving network embedding methods focus
on network transitivity in all types of networks and the struc-
tural balance property in signed networks.

Figure 7: Overview of the method proposed by Cao et al. (Cao, Lu, and Xu 2016). Image extracted from (Cao, Lu, and Xu
2016).

Network Embedding with Node Content

In some types of networks, like information networks, nodes
are acompanied with rich information, such as node la-
bels, attributes or even semantic descriptions. How to com-
bine them with the network topology in network embedding
arouses considerable research interests.

Tu et al. (Tu et al. 2016) propose a semi-supervised
network embedding algorithm, MMDW, by leveraging la-
beling information of nodes. MMDW is also based on
the DeepWalk-derived matrix factorization. MMDW adopts
support vector machines (SVM) (Hearst et al. 1998) and in-
corporates the label information to ﬁnd an optimal classi-
fying boundary. By optimizing the max-margin classiﬁer of
SVM and matrix factorization based DeepWalk simultane-
ously, the representations of nodes that have more discrimi-
native ability can be learned.

Le et al. (Le and Lauw 2014) propose a generative model
for document network embedding, where the words asso-
ciated with each documents and the relationships between
documents are both considered. For each node, they learn
its low-rank representation ui in a low dimensional vector
space, which can reconstruct the network structure. Also,
they learn the representation of nodes in the topic space
based on the Relational Topic Model (RTM) (Chang and
Blei 2009), where each topic z is associated with a proba-
bility distribution over words. To integrate the two aspects,
they associate each topic z with a representation ϕz in the
same low dimensional vector space and then have the fol-
lowing function:

P (z|vi) =

exp(− 1
Pz exp(− 1

2kui − ϕzk2)
2kui − ϕzk2)

.

(11)

Finally, in a uniﬁed generative process, the representations
of nodes U can be learned.

Besides network structures, Yang et al. (Yang et al. 2015)
propose TADW that takes the rich information (e.g., text)
associated with nodes into account when they learn the low
dimensional representations of nodes. They ﬁrst prove that
DeepWalk is equivalent to factorizing the matrix M whose
element Mij = log([ei(A + A2 + ... + At)]j/t), where A
is the adjacency matrix, t denotes the t steps in a random
walk and ei is a row vector where all entries are 0 except
the i-th entry is 1. Then, based on the DeepWalk-derived

Figure 8: The framework of SiNE.
from (Wang et al. 2017a).

Image extracted

Summary

Generally, most of the structure and property preserving
methods take high order proximities of nodes into account,
which demonstrate the importance of preserving high or-
der structures in network embedding. The difference is the
strategy of obtaining the high order structures. Some meth-
ods implicitly preserve high-order structure by assuming a
generative mechanism from a node to its neighbors, while
some other methods realize this by explicitly approximating
high-order proximities in the embedding space. As topology
structures are the most notable characteristic of networks,
structure-preserving network methods embody a large part
of the literature. Comparatively, property preserving net-
work embedding is a relatively new research topic and is
only studied lightly. As network properties usually drive the
formation and evolution of networks, it shows great poten-
tial for future research and applications.

5 Network Embedding with Side

Information

Besides network structures, side information is another im-
portant information source for network embedding. Side in-
formation in the context of network embedding can be di-
vided into two categories: node content and types of nodes
and edges. In this section, we review the methods that take
side information into network embedding.

Inter-Node Relationship Modeling

Figure 10: The framework of TriDNR (Pan et al. 2016). Im-
age extracted from (Pan et al. 2016).

which models the network structure. The second term mod-
els the node-content correlations and the third term models
the label-node correspondences. As a result, the learned rep-
resentations is enhanced by network structure, node content,
and node labels.

LANE (Huang, Li, and Hu 2017) is also proposed to in-
corporate the label information into the attributed network
embedding. Unlike the previous network embedding meth-
ods, LANE is mainly based on spectral techniques (Chung
1997). LANE adopts the cosine similarity to construct the
corresponding afﬁnity matrices of the node attributes, net-
work structure, and labels. Then, based on the corresponding
Laplacian matrices, LANE is able to map the three different
sources into different latent representations, respectively. In
order to build the relationship among those three represen-
tations, LANE projects all these latent representations into
a new common space by leveraging the variance of the pro-
jected matrix as the correlation metric. The learned represen-
tations of nodes are able to capture the structure proximities
as well as the correlations in the label informed attributed
network.

Although different methods adopt different strategies to
integrate node content and network topology, they all as-
sume that node content provides additional proximity infor-
mation to constrain the representations of nodes.

Heterogeneous Information Network Embedding

Different from networks with node content, heterogeneous
networks consist of different types of nodes and links. How
to unify the heterogeneous types of nodes and links in net-
work embedding is also an interesting and challenging prob-
lem.

Yann et al. (Jacob, Denoyer, and Gallinari 2014) propose
a heterogeneous social network embedding algorithm for
classifying nodes. They learn the representations of all types
of nodes in a common vector space, and perform the infer-
ence in this space. In particular, for the node ui with type
ti, they utilize a linear classiﬁcation function f ti
θ to predict
its label and adopt the hinge-loss function ∆ to measure the

9: The

Figure
by
Sun et al. (Sun et al. 2016). Image extracted from (Sun et
al. 2016).

augmented

proposed

network

matrix factorization and motivated by the inductive matrix
completion (Natarajan and Dhillon 2014), they incorporate
rich text information T into network embedding as follows:

W,HkM − WT HTk2
min

F +

λ
2

(kWk2

F + kHk2
F ).

(12)

Finally, they concatenate the optimal W and HT as the rep-
resentations of nodes.

TADW suffers from high computational cost and the node
attributes just simply incorporated as unordered features lose
the much semantic information. Sun et al. (Sun et al. 2016)
consider the content as a special kind of nodes, and give rise
to an augmented network, as shown in Fig. 9. With this aug-
mented network, they are able to model the node-node links
and node-content links in the latent vector space. They use
a logistic function to model the relationship in the new aug-
mented network, and by combining with negative sampling,
they can learn the representations of nodes in a joint ob-
jective function, such that the representations can preserve
the network structure as well as the relationship between the
node and content.

Pan et al. (Pan et al. 2016) propose a coupled deep model
that incorporates network structure, node attributes and node
labels into network embedding. The architecture of the pro-
posed model is shown in Fig. 10. Consider a network with
N nodes {vi}i=1,...,N , where each node is associated with
a set of words {wi}, and some nodes may have |L| labels
{ci}. To exploit this information, they aim to maximize the
following function:

L =(1 − α)

N

X

X

X

i=1

s∈S

−b≤j≤b,j6=0

log P (vi+j|vi)

|L|

X

X

N

X

X

α

i=1

i=1

−b≤j≤b

−b≤j≤b

log P (wj|vi) + α

log P (wj|ci),
(13)
where S is the random walks generated in the network and
b is the window size of sequence. Speciﬁcally, function
P , which captures the probability of observing contextual
nodes (or words) given the current node (or label), can be
computed using the soft-max function. In Eq. 13, the ﬁrst
term is also motivated by Skip-Gram, similar to DeepWalk,

( 

)

( 

)

( 

)

Figure 11: Overview of the method proposed by Chang et al. (Chang et al. 2015). Image extracted from (Chang et al. 2015).

loss with the true label yi:

l

X

i=1

∆(f ti

θ (ui), yi),

(14)

where l is the number of labeled nodes. To preserve the lo-
cal structures in the latent space, they impose the following
smoothness constraint, which enforces that two nodes i and
j will be close in the latent space if they have a large weight
Wij in the heterogeneous network:

X

i,j

Wijkui − ujk2.

(15)

In this way, different types of nodes are mapped into a com-
mon latent space. The overall loss function combines the
classiﬁcation and regularization losses Eq. (14) and Eq. (15).
A stochastic gradient descent method is used here to learn
the representations of nodes in a heterogeneous network for
classifying.

Chang et al. (Chang et al. 2015) propose a deep embed-
ding algorithm for heterogeneous networks, whose nodes
have various types. The main goal of the heterogeneous net-
work embedding is to learn the representations of nodes with
different types such that the heterogeneous network struc-
ture can be well preserved. As shown in Fig. 11, given a
heterogeneous network with two types of data (e.g., images
and texts), there are three types of edges, i.e., image-image,
text-text, and image-text. The nonlinear embeddings of im-
ages and texts are learned by a CNN model and the fully
connected layers, respectively. By cascading the extra lin-
ear embedding layer, the representations of images and texts
can be mapped to a common space. In the common space,
the similarities between data from different modalities can
be directly measured, so that if there is an edge in the origi-
nal heterogeneous network, the pair of data has similar rep-
resentations.

Huang and Mamoulis (Huang and Mamoulis 2017) pro-
pose a meta path similarity preserving heterogeneous infor-
mation network embedding algorithm. To model a particular
relationship, a meta path (Sun et al. 2011) is a sequence of

object types with edge types in between. They develop a fast
dynamic programming approach to calculate the truncated
meta path based proximities, whose time complexity is lin-
ear to the size of the network. They adopt a similar strategy
as LINE (Tang et al. 2015) to preserve the proximity in the
low dimensional space.

Xu et al. (Xu et al. 2017) propose a network embed-
ding method for coupled heterogeneous network. The cou-
pled heterogeneous network consists of two different but re-
lated homogeneous networks. For each homogeneous net-
work, they adopt the same function (Eq. (6)) as LINE to
model the relationships between nodes. Then the harmo-
nious embedding matrix is introduced to measure the close-
ness between nodes of different networks. Because the inter-
network edges are able to provide the complementary infor-
mation in the presence of intra-network edges, the learned
embeddings of nodes also perform well on several tasks.

Summary

In the methods preserving side information, side informa-
tion introduces additional proximity measures so that the
relationships between nodes can be learned more compre-
hensively. Their difference is the way of integrating network
structures and side information. Many of them are natu-
rally extensions from structure preserving network embed-
ding methods.

6 Advanced Information Preserving

Network Embedding

In this section, we review network embedding methods that
take additional advanced information into account so as to
solve some speciﬁc analytic tasks. Different from side infor-
mation, the advanced information refers to the supervised or
pseudo supervised information in a speciﬁc task.

Information Diffusion

Information diffusion (Guille et al. 2013) is an ubiquitous
phenomenon on the web, especially in social networks.
Many real applications, such as marketing, public opinion

formation, epidemics, are related to information diffusion.
Most of the previous studies on information diffusion are
conducted in original network spaces.

Recently, Simon et al. (Bourigault et al. 2014) propose a
social network embedding algorithm for predicting informa-
tion diffusion. The basic idea is to map the observed infor-
mation diffusion process into a heat diffusion process mod-
eled by a diffusion kernel in the continuous space. Specif-
ically, the diffusion kernel in a d-dimensional Euclidean
space is deﬁned as

K(t, j, i) = (4Πt)− d

2 e− kj−ik2

4t

.

(16)

It models the heat at location i at time t when an initial unit
heat is positioned at location j, which also models how in-
formation spreads between nodes in a network.

The goal of the proposed algorithm is to learn the rep-
resentations of nodes in the latent space such that the dif-
fusion kernel can best explain the cascades in the training
set. Given the representation uj of the initial contaminated
node j in cascade c, the contamination score of node i can
be computed by

K(t, j, i) = (4Πt)− d

2 e−

kuj −uik2

4t

.

(17)

The intuition of Eq. (17) is that the closer a node in the latent
space is from the source node, the sooner it is infected by
information from the source node. As the cascade c offers a
guidance for the information diffusion of nodes, we expect
the contamination score to be as closely consistent with c
as possible, which gives rise to the following empirical risk
function:

L(U) = X

∆(K(., j, .), c),

(18)

c

where function ∆ is a measure of the difference between the
predicted score and the observed diffusion in c. By minimiz-
ing the Eq. (18) and reformulating it as a ranking problem,
the optimal representations U of nodes can be obtained.

The cascade prediction problem here is deﬁned as pre-
dicting the increment of cascade size after a given time in-
terval (Li et al. 2017). Li et al. (Li et al. 2017) argue that
the previous work on cascade prediction all depends on the
bag of hand-crafting features to represent the cascade and
network structures. Instead, they present an end-to-end deep
learning model to solve this problem using the idea of net-
work embedding, as illustrated in Fig. 12. Similar to Deep-
Walk (Perozzi, Al-Rfou, and Skiena 2014), they perform
a random walk over a cascade graph to sample a set of
paths. Then the Gated Recurrent Unite (GRU) (Hochreiter
and Schmidhuber 1997), a speciﬁc type of recurrent neural
network (Mikolov et al. 2010), is applied to these paths and
learn the embeddings for these paths. The attention mecha-
nism is then used to assemble these embeddings to learn the
representation of this cascade graph. Once the representation
of this cascade is known, a multi-layer perceptron (Ruck et
al. 1990) can be adopted to output the ﬁnal predicted size of
this cascade. The whole procedure is able to learn the repre-
sentation of cascade graph in an end-to-end manner. The ex-
perimental results on the Twitter and Aminer networks show
promising performance on this task.

Anomaly Detection
Anomaly detection has been widely investigated in pre-
vious work (Akoglu, Tong, and Koutra 2015). Anomaly
detection in networks aims to infer the structural incon-
sistencies, which means the anomalous nodes that con-
nect to various diverse inﬂuential communities (Burt 2004;
Hu et al. 2016), such as the red node in Fig. 13. Hu et al. (Hu
et al. 2016) propose a network embedding based method for
anomaly detection. In particular, in the proposed model, the
k-th element uk
i in the embedding ui of node i represents the
correlation between node i and community k. Then, they as-
sume that the community memberships of two linked nodes
should be similar. Therefore, they can minimize the follow-
ing objective function:
L = X

kui − ujk2 + α X

(kui − ujk− 1)2. (19)

(i,j)∈E

(i,j) /∈E

This optimization problem can be solved by the gradient de-
scent method. By taking the neighbors of a node into ac-
count, the embedding of the node can be obtained by a
weighted sum of the embeddings of all its neighbors. An
anomaly node in this context is one connecting to a set of dif-
ferent communities. Since the learned embedding of nodes
captures the correlations between nodes and communities,
based on the embedding, they propose a new measure to
indicate the anomalousness level of a node. The larger the
value of the measure, the higher the propensity for a node
being an anomaly node.

Network Alignment
The goal of network alignment is to establish the cor-
respondence between the nodes from two networks.
Man et al. (Man et al. 2016) propose a network embedding
algorithm to predict the anchor links across social networks.
The same users who are shared by different social networks
naturally form the anchor links, and these links bridge the
different networks. As illustrated in Fig. 14, the anchor link
prediction problem is, given source network Gs and target
network Gt and a set of observed anchor links T , to identify
the hidden anchor links across Gs and Gt.

First, Man et al. (Man et al. 2016) extend the original
sparse networks Gs and Gt to the denser networks. The ba-
sic idea is that given a pair of users with anchor links, if they
have a connection in one network, so do their counterparts
in the other network (Bayati et al. 2009), in this way, more
links will be added to the original networks. For a pair of
nodes i and j whose representations are ui and uj , respec-
tively, by combining the negative sampling strategy, they use
the following function to preserve the structures of Gs and
Gt in a vector space:

log σ(uT

i uj) +

K

X

k=1

Evk∝Pn(v)[log(1 − σ(uT

i uk))],

(20)

where σ(x) = 1/(1 + exp(−x)). The ﬁrst term models the
observed edges, and the second term samples K negative
edges.

Then given the observed anchor links (vs

j) ∈ T and
the representations ui and uj , they aim to learn a mapping

i , ut

Figure 12: The end-to-end pipeline of DeepCas proposed by Li et al. (Li et al. 2017). Image extracted from (Li et al. 2017).

Figure 13: The anomalous (red) nodes in embedding, and
A, B, C, D are four communities (Hu et al. 2016). Image
extracted from (Hu et al. 2016).

function φ parameterized by θ so as to bridge these two rep-
resentations. The loss function is deﬁned as:

kφ(ui; θ) − ujkF .

(21)

The mapping function can be linear or non-linear via Multi-
Layer Perceptron (MLP) (Ruck et al. 1990). By optimizing
Eq. (20) and Eq. (21) simultaneously, the representations
that can preserve the network structure and respect the ob-
served anchor links can be learned.

Summary

Advanced information preserving network embedding usu-
ally consists of two parts. One is to preserve the network
structure so as to learn the representations of nodes. The
other is to establish the connection between the representa-
tions of nodes and the target task. The ﬁrst one is similar to
structure and property preserving network embedding, while
the second one usually needs to consider the domain knowl-
edge of a speciﬁc task. The domain knowledge encoded by
the advanced information makes it possible to develop end-
to-end solutions for network applications. Compared with
the hand-crafted network features, such as numerous net-
work centrality measures, the combination of advanced in-
formation and network embedding techniques enables repre-

Figure 14: The illustrative diagram of network embedding
for anchor link prediction proposed by Man et al. (Man et
al. 2016). Image extracted from (Man et al. 2016).

sentation learning for networks. Many network applications
may be beneﬁtted from this new paradigm.

7 Network Embedding in Practice

In this section, we summarize the data sets, benchmarks, and
evaluation tasks that are commonly used in developing new
network embedding methods.

Real World Data Sets
Getting real network data sets in academic research is al-
ways far from trivial. Here, we describe some most popular
real world networks currently used in network embedding
literature. The data sets can be roughly divided into four
groups according to the nature of the networks: social net-
works, citation networks, language networks, and biological
networks. A summary of these data sets can be found in Ta-
ble 2. Please note that, the same name may be used to re-
fer to different variants in different studies. Here we aim to
provide an overview of the networks, and do not attempt to
describe all of those variants in detail.

Social Networks
• BLOGCATALOG (Tang and Liu 2009a). This is a net-
work of social relationships of the bloggers listed on
the BlogCatalog website. One instance of this data set
can be found at http://socialcomputing.asu.
edu/datasets/BlogCatalog3.

• FLICKR (Tang and Liu 2009a). This is a network of
the contacts between users of the photo sharing web-
sites Flickr. One instance of the network can be down-
loaded at http://socialcomputing.asu.edu/
datasets/Flickr.

• YOUTUBE (tang and Liu 2009b). This is a net-
work between users of the popular video sharing web-
site, Youtube. One instance of the network can be
found at http://socialcomputing.asu.edu/
datasets/YouTube2.

• Twitter (De Choudhury et al. 2010). This is a net-
work between users on a social news website Twit-
ter. One instance of
the network can be down-
loaded at http://socialcomputing.asu.edu/
datasets/Twitter.

Citation Networks
• DBLP (Tang et al. 2008). This network represents the
citation relationships between authors and papers. One
instance of the data set can be found at http://
arnetminer.org/citation.

• Cora (McCallum et al. 2000). This network represents the
citation relationships between scientiﬁc publications. Be-
sides the link information, each publication is also asso-
ciated with a word vector indicating the absence/presence
of the corresponding words from the dictionary. One in-
stance of the data set can be found at https://linqs.
soe.ucsc.edu/node/236.

• Citeseer (McCallum et al. 2000). This network, simi-
lar to Cora, also consists of scientiﬁc publications and

their citation relationships. One instance of the data set
can be downloaded at https://linqs.soe.ucsc.
edu/node/236.

• ArXiv (Leskovec, Kleinberg, and Faloutsos 2007;
Leskovec and Krevl 2016). This is the collaboration
network constructed from the ArXiv website. One in-
stance of the data set can be found at http://snap.
stanford.edu/data/ca-AstroPh.html.

Language Networks
• Wikipedia (Mahoney 2011). This

is a word co-
occurrence network from the English Wikipedia pages.
One instance of the data set can be found at http:
//www.mattmahoney.net/dc/textdata.

Biological Networks
• PPI (Breitkreutz et al. 2007). This is a subgraph of the
biological network that represents the pairwise physical
interactions between proteins in yeast. One instance of
the data set can be downloaded at http://konect.
uni-koblenz.de/networks/maayan-vidal.

Node Classiﬁcation

Given some nodes with known labels in a network, the node
classiﬁcation problem is to classify the rest nodes into dif-
ferent classes. Node classiﬁcation is one of most primary
applications for network embedding (Perozzi, Al-Rfou, and
Skiena 2014; Tang et al. 2015). Essentially, node classiﬁca-
tion based on network embedding for can be divided into
three steps. First, a network embedding algorithm is ap-
plied to embed the network into a low dimensional space.
Then, the nodes with known labels are used as the training
set. Last, a classiﬁer, such as Liblinear (Fan et al. 2008), is
learned from the training set. Using the trained classiﬁer, we
can infer the labels of the rest nodes.

The popularly used evaluation metrics

for multi-
label classiﬁcation problem include Micro-F1 and Macro-
F1 (Tang and Liu 2009a). Speciﬁcally, for an overall label
set C and a label A, let T P (A), F P (A), and F N (A) be
the number of true positives, false positives, and false nega-
tives in the instances predicted as A, respectively. Then the
Micro-F1 is deﬁned as

P r =

R =

PA∈C T P (A)

PA∈C(T P (A) + F P (A))
,

PA∈C T P (a)

PA∈C(T P (A) + F N (A))

,

(22)

Micro-F1 =

2 ∗ P r ∗ R
P r + R

.

The Macro-F1 measure is deﬁned as

Macro-F1 = PA∈C F 1(A)

|C|

,

(23)

where F 1(A) is the F1-measure for the label A.

The multi-label classiﬁcation application has been suc-
cessfully tested on four categories of data sets, namely so-
cial networks (BLOGCATALOG (Tang and Liu 2009a),

Table 1: A summary of real world networks

structure and property

network embedding

networks

preserving network

BLOGCATALOG

FLICKR

YOUTUBE

Twitter
DBLP
Cora

Citeseer
ArXiv

Wikipedia

PPI

embedding

√
√
√
√
√
√
√
√
√
√

with side

information

√
√
√

classiﬁcation

link prediction

clustering

visualization

√
√
√
√
√
√
√

√
√
√
√
√
√
√
√
√
√

√
√
√
√
√
√
√

√
√
√
√
√
√
√

FLICKR (Tang and Liu 2009a), and YOUTUBE (tang and
Liu 2009b)), citation networks (DBLP (Tang et al. 2008),
Cora (McCallum et al. 2000), and Citeseer (McCallum et
al. 2000)), language networks (Wikipedia (Mahoney 2011)),
and biological networks (PPI (Breitkreutz et al. 2007)).

Speciﬁcally, a social network usually is a communication
network among users on online platforms. DeepWalk (Per-
ozzi, Al-Rfou, and Skiena 2014), GraRep (Cao, Lu, and Xu
2015), SDNE (Wang, Cui, and Zhu 2016), node2vec (Grover
and Leskovec 2016), and LANE (Huang, Li, and Hu
2017) conduct classiﬁcation on BLOGCATALOG to eval-
uate the performance. Also, the classiﬁcation performance
on FLICKR has been assessed in (Perozzi, Al-Rfou, and
Skiena 2014; Tang et al. 2015; Wang, Cui, and Zhu 2016;
Huang, Li, and Hu 2017). Some studies (Perozzi, Al-Rfou,
and Skiena 2014; Tang et al. 2015; Wang, Cui, and Zhu
2016) apply their algorithms to the Youtube network, which
also achieves promising classiﬁcation results. A citation net-
work usually represents the citation relationships between
authors or between papers. For example, (Tang et al. 2015;
Pan et al. 2016) use the DBLP network to test the classi-
ﬁcation performance. Cora is used in (Yang et al. 2015;
Tu et al. 2016). Citeseer is used in (Yang et al. 2015;
Pan et al. 2016; Tu et al. 2016). The classiﬁcation perfor-
mance on language networks, such as Wikipedia, is also
widely studied (Tang et al. 2015; Grover and Leskovec 2016;
Yang et al. 2015; Tu et al. 2016). The Protein-Protein Inter-
actions (PPI) is used in (Grover and Leskovec 2016). Based
on NUS-WIDE (Chua et al. 2009), a heterogeneous network
extracted from Flickr, Chang et al. (Chang et al. 2015) vali-
dated the superior classiﬁcation performance of network em-
bedding on heterogeneous networks.

To summarize, network embedding algorithms have been
widely used on various networks and have been well demon-
strated their effectiveness on node classiﬁcation.

Link Prediction
Link prediction, as one of the most fundamental problems
on network analysis, has received a considerable amount of
attention (Liben-Nowell and Kleinberg 2007; L¨u and Zhou
2011). It aims to estimate the likelihood of the existence
of an edge between two nodes based on observed network

structure (Getoor and Diehl 2005). Since network embed-
ding algorithms are able to learn the vector based features
for each node, the similarity between nodes can be easily
estimated, for example, by the inner product or the cosine
similarity. A larger similarity implies that the two nodes may
have a higher propensity to be linked.

Generally, precision@k and Mean Average Precision
(MAP) are used to evaluate the link prediction perfor-
mance (Wang, Cui, and Zhu 2016), which are deﬁned as
follows.
precision@k(i) = |{j|i, j ∈ V, index(j) ≤ k,△i(j) = 1}|
(24)
where V is the set of nodes, index(j) is the ranked index
of the j-th node and △i(j) = 1 indicates that nodes i and j
have an edge.

k

,

AP (i) = Pj precision@j(i) ∗ △i(j)
M AP = Pi ∈ QAP (i)

|{△i(j) = 1}|

,

,

(25)

where Q is the query set.

|Q|

The popularly used real networks for the link predic-
tion task can be divided into three categories: citation net-
works (ARXIV (Leskovec, Kleinberg, and Faloutsos 2007;
Leskovec and Krevl 2016) and DBLP1), social networks
(SN-TWeibo2, SN-Twitter (De Choudhury et al. 2010),
Facebook (Leskovec and Krevl 2016), Epinions3, and Slash-
dot4), and biological networks (PPI (Breitkreutz et al.
2007)). Speciﬁcally, (Wang, Cui, and Zhu 2016) and (Grover
and Leskovec 2016) test the effectiveness on ARXIV5.
HOPE (Ou et al. 2016) applies network embedding to
link prediction on two directed networks SN-Twitter, which
is a subnetwork of Twitter6, and SN-TWeibo, which is

1http://dblp.uni-trier.de/
2http://www.kddcup2012.org/c/

kddcup2012-track1/data

3http://www.epinions.com/
4http://slashdot.org/
5https://arxiv.org/
6https://twitter.com/

(a) SDNE

(b) LINE

(c) DeepWalk

(d) GraRep

(e) LE

Figure 15: Network visualization of 20-NewsGroup by different network embedding algorithms, i.e., SDNE (Wang, Cui,
and Zhu 2016), LINE (Tang et al. 2015), DeepWalk (Perozzi, Al-Rfou, and Skiena 2014), GraRep (Cao, Lu, and Xu 2015),
LE (Belkin and Niyogi 2003). Image extracted from SDNE (Wang, Cui, and Zhu 2016).

a subnetwork of the social network in Tencent Weibo7.
Node2vec (Grover and Leskovec 2016) tests the perfor-
mance of link prediction on a social network Facebook and
a biological network PPI. EOE (Xu et al. 2017) uses DBLP
to demonstrate the effectiveness on citation networks. Based
on two social networks, Epinions and Slashdot, SiNE (Wang
et al. 2017a) shows the superior performance of signed net-
work embedding on link prediction.

To sum up, network embedding is able to capture inher-
ent network structures, and thus naturally it is suitable for
link prediction applications. Extensive experiments on var-
ious networks have demonstrated that network embedding
can tackle link prediction effectively.

Node Clustering
Node clustering is to divide the nodes in a network into clus-
ters such that the nodes within the same cluster are more
similar to each other than the nodes in different clusters. Net-
work embedding algorithms learn representations of nodes
in low dimensional vector spaces, so many typical clustering
methods, such as Kmeans (MacQueen and others 1967), can
be directly adopted to cluster nodes based on their learned
representations.

Many evaluation criteria have been proposed for cluster-
ing evaluation. Accuracy (AC) and normalized mutual infor-
mation (NMI) (Cai et al. 2011) are frequently used to assess
the clustering performance on graphs and networks. Speciﬁ-
cally, AC is used to measure the percentage of correct labels
obtained. Given n data, let li and ri be the obtained cluster
label and the ground truth label, respectively. AC is deﬁned
as

where H(C) is the entropy of C, and M I(C, C′) is the mu-
tual information metric of C and C′.

The node clustering performance is tested on three
types of networks: social networks (e.g., Facebook (Traud,
Mucha, and Porter 2012) and YELP (Huang and Mamoulis
2017)), citation networks (e.g., DBLP (Sun et al. 2011)),
and document networks (e.g., 20-NewsGroup (Tian et al.
2014)). In particular, (Chang et al. 2015) extracts a social
network from a social blogging site. It uses the TF-IDF fea-
tures extracted from the blogs as the features of blog users
and the “following” behaviors to construct the linkages. It
successfully applies network embedding to the node clus-
tering task. (Wang et al. 2017b) uses the Facebook social
network to demonstrate the effectiveness of community pre-
serving network embedding on node clustering. (Huang and
Mamoulis 2017) is applied to more social networks includ-
ing MOVIE, a network extracted from YAGO (Huang et al.
2016) that contains knowledge about movies, YELP, a net-
work extracted from YELP that is about reviews given to
restaurants, and GAME, extracted from Freebase (Bollacker
et al. 2008) that is related to video games. (Cao, Lu, and Xu
2016) tests the node clustering performance on a document
network, 20-NewsGroup network, which consists of doc-
uments. The node clustering performance on citation net-
works is tested (Huang and Mamoulis 2017) by clustering
authors in DBLP. The results show the superior clustering
performance on citation networks.

In summary, node clustering based on network embed-
ding is tested on different types of networks. Network em-
bedding has become an effective method to solve the node
clustering problem.

AC = Pn

i=1 δ(ri, map(li))

n

,

(26)

Network Visualization

where δ(x, y) equals one if x = y and equals zero other-
wise, and map(li) is the permutation mapping function that
maps each cluster label li to the equivalent label from the
data, which can be found using the Kuhn-Munkres algo-
rithm (Lov´asz and Plummer 2009).

Given the set of clusters obtained from the ground truth
and obtained from the algorithm, respectively, denoted by C
and C′, the NMI can be deﬁned as

N M I(C, C′) =

M I(C, C′)

max(H(C), H(C′))

,

(27)

7http://t.qq.com/

Another important application of network embedding is net-
work visualization, that is, generating meaningful visualiza-
tion that layouts a network on a two dimensional space. By
applying the visualization tool, such as t-SNE (Maaten and
Hinton 2008), to the learned low dimensional representa-
tions of nodes, it is easy for users to see a big picture of
a sophisticated network so that the community structure or
node centrality can be easily revealed.

More often than not, the quality of network visualization
by different network embedding algorithms is evaluated vi-
sually. Fig. 15 is an example by SDNE (Wang, Cui, and Zhu
2016) where SDNE is applied to 20-NewsGroup. In Fig. 15,

More Structures and Properties
Although various methods are proposed to preserve struc-
tures and properties, such as ﬁrst order and high order prox-
imities, communities, asymmetric transitivity, and structural
balance, due to the complexity of real world networks, there
are still some particular structures that are not fully consid-
ered in the existing network embedding methods. For ex-
ample, how to incorporate network motifs (Benson, Gleich,
and Leskovec 2016), one of the most common higher-order
structures in a network, into network embedding remains an
open problem. Also, more complex local structures of a node
can be considered to provide higher level constraints. The
current assumption of network embedding is usually based
on the pairwise structure, that is, if two nodes have a link,
then their representations are similar. This assumption can
work well for some applications, such as link prediction, but
it cannot encode the centrality information of nodes, because
the centrality of a node is usually related to a more complex
structure. As another example, in several real world applica-
tions, an edge may involve more than two nodes, known as
a hyperedge. Such a hypernetwork naturally indicates richer
relationships among nodes and has its own characteristics.
Hypernetwork embedding is important for some real appli-
cations.

The power law distribution property indicates that most
nodes in a network are associated with a small number of
edges. Consequently, it is hard to learn an effective represen-
tation for a node with limited information. How this prop-
erty affects the performance of network embedding and how
to improve the embeddings of the minority nodes are still
largely untouched.

The Effect of Side Information
Section 5 discusses a series of network embedding algo-
rithms that preserve side information in embedding. All the
existing methods assume that there is an agreement between
network structure and side information. To what extent the
assumption holds in real applications, however, remains an
open question. The low correlation of side information and
structures may degrade the performance of network em-
bedding. Moreover, it is interesting to explore the comple-
mentarity between network structures and side information.
More often than not, each information may contain some
knowledge that other information does not have.

Besides, in a heterogeneous information network, to mea-
sure the relevance of two objects, the meta path, a sequence
of object types with edge types in between, has been widely
used. However, meta structure (Huang et al. 2016), which is
essentially a directed acyclic graph of object and edge types,
provides a higher-order structure constraint. This suggests a
huge potential direction for improving heterogeneous infor-
mation network embedding.

More Advanced Information and Tasks
In general, most of network embedding algorithms are de-
signed for general purposes, such as link prediction and node
classiﬁcation. These network embedding methods mainly
focus on general network structures and may not be spe-
ciﬁc to some target applications. Another important research

Figure 16: Relationship among different types of network
embedding methods.

each document is mapped into a two dimensional space as a
point, and different colors on the points represent the labels.
As can be seen, network embedding preserves the intrin-
sic structure of the network, where similar nodes are closer
to each other than dissimilar nodes in the low-dimensional
space. Also, LINE (Tang et al. 2015), GraRep (Cao, Lu, and
Xu 2015), and EOE (Xu et al. 2017) are applied to a cita-
tion network DBLP and generate meaningful layout of the
network. Pan et al. (Pan et al. 2016) show the visualization
of another citation network Citeseer-M10 (Lim and Buntine
2016) consisting of scientiﬁc publications from ten distinct
research areas.

Open Source Software

In Table 2, we provide a collection of links where one can
ﬁnd the source code of various network embedding methods.

8 Conclusions and Future Research

Directions

The above survey of the state-of-the-art network embedding
algorithms clearly shows that it is still a young and promis-
ing research ﬁeld. To apply network embedding to tackle
practical applications, a frontmost question is to select the
appropriate methods. In Fig. 16 we show the relationship
among different types of network embedding methods dis-
cussed in this survey.

The structure and property preserving network embed-
ding is the foundation. If one cannot preserve well the net-
work structure and retain the important network properties,
in the embedding space serious information is loss, which
hurts the analytic tasks in sequel. Based on the structure and
property preserving network embedding, one may apply the
off-the-shelf machine learning methods. If some side infor-
mation is available, it can be incorporated into network em-
bedding. Furthermore, the domain knowledge of some cer-
tain applications as advanced information can be considered.
In the rest of this section, we discuss several interesting

directions for future work.

Table 2: A summary of the source code

Structure and property preserving network embedding

Methods

DeepWalk (Perozzi, Al-Rfou, and Skiena 2014)

LINE (Tang et al. 2015)

GraRep (Cao, Lu, and Xu 2015)

SDNE (Wang, Cui, and Zhu 2016)

Source code

https://github.com/phanein/deepwalk

https://github.com/tangjianpku/LINE

https://github.com/ShelsonCao/GraRep

http://nrl.thumedia.org/structural-deep-network-embedding

Node2vec (Grover and Leskovec 2016)

https://github.com/aditya-grover/node2vec

DNGR (Cao, Lu, and Xu 2016)

M-NMF (Wang et al. 2017b)

GED (Chen et al. 2017)

Ou et al. (Ou et al. 2015)

HOPE (Ou et al. 2016)

Methods

MMDW (Tu et al. 2016)

TADW (Yang et al. 2015)

TriDNR (Pan et al. 2016)

https://github.com/ShelsonCao/DNGR

http://nrl.thumedia.org/community-preserving-network-embedding

https://users.ece.cmu.edu/˜sihengc/publications.html

http://nrl.thumedia.org/non-transitive-hashing-with-latent-similarity-components

http://nrl.thumedia.org/asymmetric-transitivity-preserving-graph-embedding

Network embedding with side information

Source code

https://github.com/thunlp/mmdw

https://github.com/thunlp/tadw

https://github.com/shiruipan/TriDNR

Methods

Source code

Advanced information preserving network embedding

Information diffusion (Bourigault et al. 2014)

https://github.com/ludc/social_network_diffusion_embeddings

Cascade prediction (Li et al. 2017)

Anomaly detection (Hu et al. 2016)

https://github.com/chengli-um/DeepCas

https://github.com/hurenjun/EmbeddingAnomalyDetection

Collaboration prediction (Chen and Sun 2017)

https://github.com/chentingpc/GuidedHeteEmbedding

direction is to explore the possibility of designing network
embedding for more speciﬁc applications. For example,
whether network embedding is a new way to detect rumors
in social network (Seo, Mohapatra, and Abdelzaher 2012;
Zhang et al. 2015)? Can we use network embedding to in-
fer social ties (Tang, Lou, and Kleinberg 2012)? Each real
world application has its own characteristics, and incorpo-
rating their unique domain knowledge into network embed-
ding is a key. The technical challenges here are how to model
the speciﬁc domain knowledge as advanced information that
can be integrated into network embedding in an effective
manner.

Dynamic Network Embedding

Although many network embedding methods are proposed,
they are mainly designed for static networks. However, in
real world applications, it is well recognized that many net-
works are evolving over time. For example, in the Face-
book network, friendships between users always dynami-
cally change over time, e.g., new edges are continuously
added to the social network while some edges may be
deleted. To learn the representations of nodes in a dy-
namic network, the existing network embedding methods
have to be run repeatedly for each time stamp, which is
very time consuming and may not meet the realtime pro-
cessing demand. Most of the existing network embedding
methods cannot be directly applied to large scale evolving
networks. New network embedding algorithms, which are
able to tackle the dynamic nature of evolving networks, are
highly desirable.

More embedding spaces
The existing network embedding methods embed a network
into the Euclidean space. In general, the principle of network
embedding can be extended to other target spaces. For ex-
ample, recently some studies (Krioukov et al. 2010) assume
that the underlying structure of a network is in the hyperbolic
space. Under this assumption, heterogeneous degree distri-
butions and strong clustering emerge naturally, as they are
the simple reﬂections of the negative curvature and metric
property of the underlying hyperbolic geometry. Exploring
other embedding space is another interesting research direc-
tion.

References

Adamic, L. A., and Adar, E. 2003. Friends and neighbors
on the web. Social networks 25(3):211–230.

Akoglu, L.; Tong, H.; and Koutra, D. 2015. Graph based
anomaly detection and description: a survey. Data Mining
and Knowledge Discovery 29(3):626–688.

Bayati, M.; Gerritsen, M.; Gleich, D. F.; Saberi, A.; and
Wang, Y. 2009. Algorithms for large, sparse network align-
ment problems.
In Data Mining, 2009. ICDM’09. Ninth
IEEE International Conference on, 705–710. IEEE.

Belkin, M., and Niyogi, P. 2002. Laplacian eigenmaps and
spectral techniques for embedding and clustering.
In Ad-
vances in neural information processing systems, 585–591.

Belkin, M., and Niyogi, P. 2003. Laplacian eigenmaps for
dimensionality reduction and data representation. Neural
computation 15(6):1373–1396.

2016.
Benson, A. R.; Gleich, D. F.; and Leskovec, J.
Higher-order organization of complex networks. Science
353(6295):163–166.

Berline, N.; Getzler, E.; and Vergne, M. 2003. Heat kernels
and Dirac operators. Springer Science & Business Media.

Chung, F. R. 1997. Spectral graph theory. Number 92.
American Mathematical Soc.

Bollacker, K.; Evans, C.; Paritosh, P.; Sturge, T.; and Taylor,
J. 2008. Freebase: a collaboratively created graph database
for structuring human knowledge.
In Proceedings of the
2008 ACM SIGMOD international conference on Manage-
ment of data, 1247–1250. AcM.

Bourigault, S.; Lagnier, C.; Lamprier, S.; Denoyer, L.; and
Gallinari, P. 2014. Learning social network embeddings
for predicting information diffusion. In Proceedings of the
7th ACM international conference on Web search and data
mining, 393–402. ACM.

Breitkreutz, B.-J.; Stark, C.; Reguly, T.; Boucher, L.; Bre-
itkreutz, A.; Livstone, M.; Oughtred, R.; Lackner, D. H.;
B¨ahler, J.; Wood, V.; et al.
The biogrid in-
teraction database: 2008 update. Nucleic acids research
36(suppl 1):D637–D640.

2007.

Burt, R. S. 2004. Structural holes and good ideas. American
journal of sociology 110(2):349–399.

Cai, D.; He, X.; Han, J.; and Huang, T. S. 2011. Graph reg-
ularized nonnegative matrix factorization for data represen-
tation. IEEE Transactions on Pattern Analysis and Machine
Intelligence 33(8):1548–1560.

Cao, S.; Lu, W.; and Xu, Q. 2015. Grarep: Learning graph
representations with global structural information. In Pro-
ceedings of the 24th ACM International on Conference on
Information and Knowledge Management, 891–900. ACM.

Cao, S.; Lu, W.; and Xu, Q. 2016. Deep neural networks
for learning graph representations.
In Proceedings of the
Thirtieth AAAI Conference on Artiﬁcial Intelligence, 1145–
1152. AAAI Press.

Cartwright, D., and Harary, F. 1956. Structural balance:
a generalization of heider’s theory. Psychological review
63(5):277.

Chang, J., and Blei, D. M. 2009. Relational topic models for
document networks. In International conference on artiﬁcial
intelligence and statistics, 81–88.

Chang, S.; Han, W.; Tang, J.; Qi, G.-J.; Aggarwal, C. C.;
and Huang, T. S. 2015. Heterogeneous network embed-
ding via deep architectures. In Proceedings of the 21th ACM
SIGKDD International Conference on Knowledge Discov-
ery and Data Mining, 119–128. ACM.

2017.

Chen, T., and Sun, Y.
Task-guided and path-
augmented heterogeneous network embedding for author
identiﬁcation.
In Proceedings of the Tenth ACM Interna-
tional Conference on Web Search and Data Mining, 295–
304. ACM.

Chen, S.; Niu, S.; Akoglu, L.; Kovaˇcevi´c, J.; and Falout-
Fast, warped graph embedding: Unify-
sos, C.
ing framework and one-click algorithm.
arXiv preprint
arXiv:1702.05764.

2017.

Chua, T.-S.; Tang, J.; Hong, R.; Li, H.; Luo, Z.; and Zheng,
Y. 2009. Nus-wide: a real-world web image database from
national university of singapore. In Proceedings of the ACM
international conference on image and video retrieval, 48.
ACM.

Cygan, M.; Pilipczuk, M.; Pilipczuk, M.; and Wojtaszczyk,
J. O. 2015. Sitting closer to friends than enemies, revisited.
Theory of computing systems 56(2):394–405.

De Choudhury, M.; Lin, Y.-R.; Sundaram, H.; Candan, K. S.;
Xie, L.; Kelliher, A.; et al. 2010. How does the data sam-
pling strategy impact the discovery of information diffusion
in social media? ICWSM 10:34–41.

Fan, R.-E.; Chang, K.-W.; Hsieh, C.-J.; Wang, X.-R.; and
Lin, C.-J. 2008. Liblinear: A library for large linear classiﬁ-
cation. Journal of machine learning research 9(Aug):1871–
1874.

Fu, Y., and Ma, Y. 2012. Graph embedding for pattern
analysis. Springer Science &amp; Business Media.

Getoor, L., and Diehl, C. P. 2005. Link mining: a survey.
Acm Sigkdd Explorations Newsletter 7(2):3–12.

Girvan, M., and Newman, M. E. 2002. Community struc-
ture in social and biological networks. Proceedings of the
national academy of sciences 99(12):7821–7826.

Grover, A., and Leskovec, J. 2016. node2vec: Scalable fea-
ture learning for networks. In Proceedings of the 22nd ACM
SIGKDD international conference on Knowledge discovery
and data mining, 1225–1234. ACM.

Guille, A.; Hacid, H.; Favre, C.; and Zighed, D. A. 2013.
Information diffusion in online social networks: A survey.
ACM Sigmod Record 42(2):17–28.

He, X., and Niyogi, P. 2004. Locality preserving projections.
In Advances in neural information processing systems, 153–
160.

Hearst, M. A.; Dumais, S. T.; Osuna, E.; Platt, J.; and
Scholkopf, B. 1998. Support vector machines. IEEE In-
telligent Systems and their Applications 13(4):18–28.

Herman, I.; Melanc¸on, G.; and Marshall, M. S. 2000. Graph
visualization and navigation in information visualization: A
survey. IEEE Transactions on visualization and computer
graphics 6(1):24–43.

Hochreiter, S., and Schmidhuber, J. 1997. Long short-term
memory. Neural computation 9(8):1735–1780.

Hu, R.; Aggarwal, C. C.; Ma, S.; and Huai, J. 2016. An
embedding approach to anomaly detection. In Data Engi-
neering (ICDE), 2016 IEEE 32nd International Conference
on, 385–396. IEEE.

Huang, Z., and Mamoulis, N. 2017. Heterogeneous infor-
mation network embedding for meta path based proximity.
arXiv preprint arXiv:1701.05291.

Huang, H.; Tang, J.; Wu, S.; Liu, L.; et al. 2014. Mining
triadic closure patterns in social networks. In Proceedings of
the 23rd international conference on World wide web, 499–
504. ACM.

Huang, Z.; Zheng, Y.; Cheng, R.; Sun, Y.; Mamoulis, N.; and
Li, X. 2016. Meta structure: Computing relevance in large
heterogeneous information networks. In Proceedings of the
22nd ACM SIGKDD International Conference on Knowl-
edge Discovery and Data Mining, 1595–1604. ACM.

Huang, X.; Li, J.; and Hu, X. 2017. Label informed at-
tributed network embedding. In Proceedings of 10th ACM
International Conference on Web Search and Data Mining
(WSDM).

Jacob, Y.; Denoyer, L.; and Gallinari, P. 2014. Learning
latent representations of nodes for classifying in heteroge-
neous social networks. In Proceedings of the 7th ACM in-
ternational conference on Web search and data mining, 373–
382. ACM.

Katz, L. 1953. A new status index derived from sociometric
analysis. Psychometrika 18(1):39–43.

Krioukov, D.; Papadopoulos, F.; Kitsak, M.; Vahdat, A.; and
Bogun´a, M. 2010. Hyperbolic geometry of complex net-
works. Physical Review E 82(3):036106.

Le, T. M., and Lauw, H. W. 2014. Probabilistic latent doc-
ument network embedding. In Data Mining (ICDM), 2014
IEEE International Conference on, 270–279. IEEE.

Lee, D. D., and Seung, H. S. 2001. Algorithms for non-
negative matrix factorization. In Advances in neural infor-
mation processing systems, 556–562.

Leskovec, J., and Krevl, A. 2016. Snap datasets: Stanford
large network dataset collection (2014). URL http://snap.
stanford. edu/data.

Leskovec, J.; Kleinberg, J.; and Faloutsos, C. 2007. Graph
evolution: Densiﬁcation and shrinking diameters. ACM
Transactions on Knowledge Discovery from Data (TKDD)
1(1):2.

Levy, O., and Goldberg, Y. 2014. Neural word embedding
as implicit matrix factorization. In Advances in neural in-
formation processing systems, 2177–2185.

Li, C.; Ma, J.; Guo, X.; and Mei, Q. 2017. Deepcas: an end-
to-end predictor of information cascades. In Proceedings of
the 26th International Conference on World Wide Web, 577–
586. International World Wide Web Conferences Steering
Committee.

Liben-Nowell, D., and Kleinberg, J.
2007. The link-
prediction problem for social networks. journal of the Asso-
ciation for Information Science and Technology 58(7):1019–
1031.

Lim, K. W., and Buntine, W. 2016. Bibliographic analy-
sis with the citation network topic model. arXiv preprint
arXiv:1609.06826.

Lov´asz, L., and Plummer, M. D. 2009. Matching theory,
volume 367. American Mathematical Soc.

L¨u, L., and Zhou, T. 2011. Link prediction in complex
networks: A survey. Physica A: statistical mechanics and
its applications 390(6):1150–1170.

Maaten, L. v. d., and Hinton, G. 2008. Visualizing data using
t-sne. Journal of Machine Learning Research 9(Nov):2579–
2605.

MacQueen, J., et al. 1967. Some methods for classiﬁcation
and analysis of multivariate observations. In Proceedings of
the ﬁfth Berkeley symposium on mathematical statistics and
probability, volume 1, 281–297. Oakland, CA, USA.

Man, T.; Shen, H.; Liu, S.; Jin, X.; and Cheng, X. 2016.
Predict anchor links across social networks via an embed-
ding approach. IJCAI.

McCallum, A. K.; Nigam, K.; Rennie, J.; and Seymore, K.
2000. Automating the construction of internet portals with
machine learning. Information Retrieval 3(2):127–163.

Mikolov, T.; Karaﬁ´at, M.; Burget, L.; Cernock`y, J.; and Khu-
danpur, S. 2010. Recurrent neural network based language
model. In Interspeech, volume 2, 3.

Mikolov, T.; Chen, K.; Corrado, G.; and Dean, J. 2013a.
Efﬁcient estimation of word representations in vector space.
arXiv preprint arXiv:1301.3781.

Mikolov, T.; Sutskever, I.; Chen, K.; Corrado, G. S.; and
Dean, J. 2013b. Distributed representations of words and
phrases and their compositionality. In Advances in neural
information processing systems, 3111–3119.

Natarajan, N., and Dhillon, I. S. 2014.
Inductive matrix
completion for predicting gene–disease associations. Bioin-
formatics 30(12):i60–i68.

Newman, M. E. 2006. Finding community structure in net-
works using the eigenvectors of matrices. Physical review E
74(3):036104.

Ou, M.; Cui, P.; Wang, F.; Wang, J.; and Zhu, W. 2015. Non-
transitive hashing with latent similarity components. In Pro-
ceedings of the 21th ACM SIGKDD International Confer-
ence on Knowledge Discovery and Data Mining, 895–904.
ACM.

Ou, M.; Cui, P.; Pei, J.; Zhang, Z.; and Zhu, W. 2016. Asym-
metric transitivity preserving graph embedding. In Proceed-
ings of the 22nd ACM SIGKDD international conference on
Knowledge discovery and data mining, 672–681. ACM.

Paige, C. C., and Saunders, M. A. 1981. Towards a gener-
alized singular value decomposition. SIAM Journal on Nu-
merical Analysis 18(3):398–405.

Pan, S.; Wu, J.; Zhu, X.; Zhang, C.; and Wang, Y. 2016.
Tri-party deep network representation. Network 11(9):12.

Perozzi, B.; Al-Rfou, R.; and Skiena, S. 2014. Deepwalk:
Online learning of social representations. In Proceedings of
the 20th ACM SIGKDD international conference on Knowl-
edge discovery and data mining, 701–710. ACM.

Roweis, S. T., and Saul, L. K. 2000. Nonlinear dimen-
sionality reduction by locally linear embedding.
science
290(5500):2323–2326.

Ruck, D. W.; Rogers, S. K.; Kabrisky, M.; Oxley, M. E.; and
Suter, B. W. 1990. The multilayer perceptron as an ap-
proximation to a bayes optimal discriminant function. IEEE
Transactions on Neural Networks 1(4):296–298.

Sen, P.; Namata, G.; Bilgic, M.; Getoor, L.; Galligher, B.;
and Eliassi-Rad, T. 2008. Collective classiﬁcation in net-
work data. AI magazine 29(3):93.

Seo, E.; Mohapatra, P.; and Abdelzaher, T. 2012. Identifying
rumors and their sources in social networks. SPIE defense,
security, and sensing 83891I–83891I.

Mahoney, M. 2011. Large text compression benchmark.

Staudt, C.; Sazonovs, A.; and Meyerhenke, H. Networkit: A

Wang, D.; Cui, P.; and Zhu, W. 2016. Structural deep net-
work embedding. In Proceedings of the 22nd ACM SIGKDD
international conference on Knowledge discovery and data
mining, 1225–1234. ACM.

Xu, L.; Wei, X.; Cao, J.; and Yu, P. S. 2017. Embedding
of embedding (eoe): Joint embedding for coupled heteroge-
neous networks. In Proceedings of the Tenth ACM Interna-
tional Conference on Web Search and Data Mining, 741–
749. ACM.

Yan, S.; Xu, D.; Zhang, B.; and Zhang, H.-J. 2005. Graph
embedding: A general framework for dimensionality reduc-
tion.
In Computer Vision and Pattern Recognition, 2005.
CVPR 2005. IEEE Computer Society Conference on, vol-
ume 2, 830–837. IEEE.

Yang, C.; Liu, Z.; Zhao, D.; Sun, M.; and Chang, E. Y. 2015.
Network representation learning with rich text information.
In Proceedings of the 24th International Joint Conference on
Artiﬁcial Intelligence, Buenos Aires, Argentina, 2111–2117.

Yang, X.; Chen, Y.-N.; Hakkani-T¨ur, D.; Crook, P.; Li, X.;
Gao, J.; and Deng, L. 2017. End-to-end joint learning of
natural language understanding and dialogue manager.
In
Acoustics, Speech and Signal Processing (ICASSP), 2017
IEEE International Conference on, 5690–5694. IEEE.

Yeung, S.; Russakovsky, O.; Mori, G.; and Fei-Fei, L. 2016.
End-to-end learning of action detection from frame glimpses
in videos. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition, 2678–2687.

Zhang, Q.; Zhang, S.; Dong, J.; Xiong, J.; and Cheng, X.
2015. Automatic detection of rumor on social network.
In Natural Language Processing and Chinese Computing.
Springer. 113–122.

tool suite for large-scale network analysis. Network Science
To appear.

Sun, Y.; Han, J.; Yan, X.; Yu, P. S.; and Wu, T. 2011. Path-
sim: Meta path-based top-k similarity search in heteroge-
neous information networks. Proceedings of the VLDB En-
dowment 4(11):992–1003.

Sun, X.; Guo, J.; Ding, X.; and Liu, T. 2016. A gen-
eral framework for content-enhanced network representa-
tion learning. arXiv preprint arXiv:1610.02906.

Tang, L., and Liu, H. 2009a. Relational learning via la-
tent social dimensions.
In Proceedings of the 15th ACM
SIGKDD international conference on Knowledge discovery
and data mining, 817–826. ACM.

tang, L., and Liu, H. 2009b. Scalable learning of collective
behavior based on sparse social dimensions. In Proceedings
of the 18th ACM conference on Information and knowledge
management, 1107–1116. ACM.

Tang, J.; Zhang, J.; Yao, L.; Li, J.; Zhang, L.; and Su, Z.
2008. Arnetminer: extraction and mining of academic so-
cial networks.
In Proceedings of the 14th ACM SIGKDD
international conference on Knowledge discovery and data
mining, 990–998. ACM.

Tang, J.; Qu, M.; Wang, M.; Zhang, M.; Yan, J.; and Mei, Q.
2015. Line: Large-scale information network embedding. In
Proceedings of the 24th International Conference on World
Wide Web, 1067–1077. ACM.

Tang, J.; Lou, T.; and Kleinberg, J. 2012. Inferring social
ties across heterogenous networks.
In Proceedings of the
ﬁfth ACM international conference on Web search and data
mining, 743–752. ACM.

Tenenbaum, J. B.; De Silva, V.; and Langford, J. C. 2000.
A global geometric framework for nonlinear dimensionality
reduction. science 290(5500):2319–2323.

Tian, F.; Gao, B.; Cui, Q.; Chen, E.; and Liu, T.-Y. 2014.
Learning deep representations for graph clustering. In AAAI,
1293–1299.

Traud, A. L.; Mucha, P. J.; and Porter, M. A. 2012. So-
cial structure of facebook networks. Physica A: Statistical
Mechanics and its Applications 391(16):4165–4180.

Tu, C.; Zhang, W.; Liu, Z.; and Sun, M. 2016. Max-margin
deepwalk: discriminative learning of network representa-
tion. In Proceedings of the Twenty-Fifth International Joint
Conference on Artiﬁcial Intelligence (IJCAI 2016), 3889–
3895.

Vincent, P.; Larochelle, H.; Lajoie, I.; Bengio, Y.; and Man-
zagol, P.-A. 2010. Stacked denoising autoencoders: Learn-
ing useful representations in a deep network with a local de-
noising criterion. Journal of Machine Learning Research
11(Dec):3371–3408.

Wang, S.; Tang, J.; Aggarwal, C.; Chang, Y.; and Liu, H.
2017a. Signed network embedding in social media.
In
Proceedings of the 2017 SIAM International Conference on
Data Mining, 327–335. SIAM.

Wang, X.; Cui, P.; Wang, J.; Pei, J.; Zhu, W.; and Yang, S.
2017b. Community preserving network embedding.

